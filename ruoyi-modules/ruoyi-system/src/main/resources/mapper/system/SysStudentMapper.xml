<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.system.mapper.SysStudentMapper">
    
    <resultMap type="SysStudent" id="SysStudentResult">
        <result property="id"    column="id"    />
        <result property="name"    column="name"    />
        <result property="classId"    column="class_id"    />
        <result property="phone"    column="phone"    />
    </resultMap>

    <resultMap id="SysStudentSysClassResult" type="SysStudent" extends="SysStudentResult">
        <collection property="sysClassList" notNullColumn="sub_id" javaType="java.util.List" resultMap="SysClassResult" />
    </resultMap>

    <resultMap type="SysClass" id="SysClassResult">
        <result property="id"    column="sub_id"    />
        <result property="name"    column="sub_name"    />
        <result property="master"    column="sub_master"    />
    </resultMap>

    <sql id="selectSysStudentVo">
        select id, name, class_id, phone from sys_student
    </sql>

    <select id="selectSysStudentList" parameterType="SysStudent" resultMap="SysStudentResult">
        <include refid="selectSysStudentVo"/>
        <where>  
            <if test="name != null  and name != ''"> and name like concat('%', #{name}, '%')</if>
            <if test="classId != null "> and class_id = #{classId}</if>
            <if test="phone != null  and phone != ''"> and phone = #{phone}</if>
        </where>
    </select>
    
    <select id="selectSysStudentById" parameterType="Long" resultMap="SysStudentSysClassResult">
        select a.id, a.name, a.class_id, a.phone,
            b.id as sub_id, b.name as sub_name, b.master as sub_master
        from sys_student a
        left join sys_class b on b.id = a.id
        where a.id = #{id}
    </select>
        
    <insert id="insertSysStudent" parameterType="SysStudent" useGeneratedKeys="true" keyProperty="id">
        insert into sys_student
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="name != null and name != ''">name,</if>
            <if test="classId != null">class_id,</if>
            <if test="phone != null">phone,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="name != null and name != ''">#{name},</if>
            <if test="classId != null">#{classId},</if>
            <if test="phone != null">#{phone},</if>
         </trim>
    </insert>

    <update id="updateSysStudent" parameterType="SysStudent">
        update sys_student
        <trim prefix="SET" suffixOverrides=",">
            <if test="name != null and name != ''">name = #{name},</if>
            <if test="classId != null">class_id = #{classId},</if>
            <if test="phone != null">phone = #{phone},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteSysStudentById" parameterType="Long">
        delete from sys_student where id = #{id}
    </delete>

    <delete id="deleteSysStudentByIds" parameterType="String">
        delete from sys_student where id in 
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
    
    <delete id="deleteSysClassByIds" parameterType="String">
        delete from sys_class where id in 
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <delete id="deleteSysClassById" parameterType="Long">
        delete from sys_class where id = #{id}
    </delete>

    <insert id="batchSysClass">
        insert into sys_class( id, name, master) values
		<foreach item="item" index="index" collection="list" separator=",">
            ( #{item.id}, #{item.name}, #{item.master})
        </foreach>
    </insert>
</mapper>